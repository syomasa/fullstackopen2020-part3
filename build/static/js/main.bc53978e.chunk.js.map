{"version":3,"sources":["services/persons.js","index.js"],"names":["baseUrl","newObj","axios","post","then","response","data","get","id","put","delete","FilterBar","props","value","onChange","changeHandler","NumberForm","onSubmit","submitHandler","nameValue","nameChangeHandler","numberValue","numberChangeHandler","type","NumberList","persons","map","person","i","key","name","number","handleDelete","bind","DeleteButton","onClick","Notification","message","error","className","App","useState","setPersons","newNamed","setNewName","newNumber","setNewNumber","showAll","setShowAll","searchQuery","setSearchQuery","setMessage","errorState","setErrorState","personsToShow","filter","important","useEffect","personService","initialPersons","event","target","forEach","toLowerCase","startsWith","preventDefault","some","window","confirm","setTimeout","console","log","concat","catch","itemToDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc53978e.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl= '/api/persons'\n\nconst create = newObj => {\n\tconst request = axios.post(baseUrl, newObj)\n\treturn request.then(response => response.data)\n}\n\nconst getAll = () => {\n\tconst request = axios.get(baseUrl)\n\treturn request.then(response => {\n\t\treturn response.data\n\t})\n}\n\nconst update = (id, newObj) => {\n\treturn axios.put(`${baseUrl}/${id}`, newObj)\n}\n\nconst deleteId = (id) => {\n\treturn axios.delete(`${baseUrl}/${id}`)\n}\nexport default {create, getAll, update, deleteId}\n","import React, {useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport personService from './services/persons'\nimport './index.css'\n\nconst FilterBar = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t<h2>Filter</h2>\n\t\t\t<form>\n\t\t\t\tsearch: <input value={props.value} onChange={props.changeHandler} />\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n\nconst NumberForm = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t<h2>Add new name and phonenumber</h2>\n\t\t\t<form onSubmit={props.submitHandler}>\n\t\t\t\t<div>\n\t\t\t\t\tname: <input value={props.nameValue} onChange={props.nameChangeHandler} />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\tphonenumber: <input value={props.numberValue} onChange={props.numberChangeHandler} />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button type='submit'>add</button>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t)\n}\nconst NumberList = (props) => {\n\treturn(\n\t\t<div>\n\t\t\t<h2>Numbers</h2>\n\t\t\t{props.persons.map((person, i) =>\n\t\t\t<p key={i}>{person.name} - {person.number} <DeleteButton handleDelete={props.handleDelete.bind(this, person)}/> </p>\n\t\t\t)}\n\t\t</div>\n\t)\n}\nconst DeleteButton = (props) => {\n\n\treturn (\n\t\t<button onClick={props.handleDelete}>delete</button>\n\t)\n}\n\nconst Notification = ({message, error}) => {\n\tif (message == null) {\n\t\treturn null\n\t}\n\telse if (error === true){\n\t\treturn(\n\t\t\t<div className=\"error\">\n\t\t\t\t{message}\n\t\t\t</div>\n\t\t)\n\t}\n\treturn (\n\t\t<div className=\"successful\">\n\t\t\t{message}\n\t\t</div>\n\t)\n}\n\nconst App = () => {\n\tconst [persons, setPersons] = useState([])\n\tconst [newNamed, setNewName] = useState('')\n\tconst [newNumber, setNewNumber] = useState('')\n\tconst [showAll, setShowAll] = useState(true)\n\tconst [searchQuery, setSearchQuery] = useState('')\n\tconst [message, setMessage] = useState(null)\n\tconst [errorState, setErrorState] = useState(false)\n\n\tconst addPerson = (event) => {\n\t\tevent.preventDefault() // prevent default behavior of submit\n\n\t\t// check if person already exists in persons\n\t\tconst isUpdated = persons.some(person => {\n\t\t\tif(person.name === newNamed) {\n\t\t\t\tif (window.confirm(`${newNamed} already exits. Do you want to update?`)) {\n\t\t\t\t\tperson.number = newNumber\n\t\t\t\t\tpersonService\n\t\t\t\t\t\t.update(person.id, person)\n\t\t\t\t\t\t.then(response => {\n\t\t\t\t\t\t\tsetErrorState(false)\n\t\t\t\t\t\t\tsetMessage(\n\t\t\t\t\t\t\t`${person.name}'s phonenumber updated successfully`\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tsetPersons([...persons])\n\t\t\t\t\t\t\tsetTimeout(() => {setMessage(null)}, 4000)\n\t\t\t\t\t\t})\n\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false\n\t\t})\n\n\t\tif (isUpdated) return\n\n\t\tconst personObject = {\n\t\t\tname: newNamed,\n\t\t\tnumber: newNumber,\n\t\t\timportant: false,\n\t\t}\n\t\tpersonService\n\t\t\t.create(personObject)\n\t\t\t.then(response => {\n\t\t\t\tconsole.log(response)\n\t\t\t\tsetNewName('')\n\t\t\t\tsetNewNumber('')\n\t\t\t\tsetShowAll(true)\n\t\t\t\tsetErrorState(false)\n\t\t\t\tsetMessage(`${response.name} added successfully`)\n\t\t\t\tsetPersons(persons.concat(response))\n\t\t\t\tsetTimeout( () => {setMessage(null)}, 4000)\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.log(error.response.data)\n\t\t\t\tsetErrorState(true)\n\t\t\t\tsetMessage(`${error.response.data}`)\n\t\t\t\tsetTimeout(() => {setMessage(null)}, 4000)\n\t\t\t})\n\t}\n\n\tconst handleNameInput = (event) => {\n\t\t//console.log(event.target.value)\n\t\tsetNewName(event.target.value)\n\t}\n\n\tconst handleNumberInput = (event) => {\n\t\tsetNewNumber(event.target.value)\n\t}\n\n\tconst handleDelete = (itemToDelete) => {\n\t\t// console.log(itemToDelete._id, itemToDelete.id)\n\t\tif (window.confirm(`Do you want to delete ${itemToDelete.name}'s number`)) {\n\t\t\tpersonService\n\t\t\t\t.deleteId(itemToDelete.id)\n\t\t\t\t.then(response => {\n\t\t\t\t\tsetErrorState(false)\n\t\t\t\t\tsetMessage(`${itemToDelete.name} removed successfully`)\n\t\t\t\t\tsetPersons(persons.filter(person => person.id !== itemToDelete.id))\n\t\t\t\t\tsetTimeout( () => {setMessage(null)}, 4000)\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tsetErrorState(true)\n\t\t\t\t\tsetMessage(`${itemToDelete.name} is already deleted`)\n\t\t\t\t\tsetTimeout( () => {setMessage(null)}, 4000)\n\t\t\t\t})\n\t\t}\n\t}\n\n\t// ternary operations: statement ? if true : else\n\tconst personsToShow = showAll\n\t\t? persons\n\t\t: persons.filter(person => person.important === true)\n\n\tconst handleSearchInput = (event) => {\n\t\tsetShowAll(false)\n\t\tsetSearchQuery(event.target.value)\n\t\tpersons.forEach(person => {\n\t\t\tif (person.name.toLowerCase().startsWith(event.target.value.toLowerCase())) {\n\t\t\t\tperson.important = true\n\t\t\t}\n\t\t\telse {\n\t\t\t\tperson.important = false\n\t\t\t}\n\t\t})\n\t\t// console.log(event.target.value)\n\t}\n\n\tuseEffect( () => {\n\t\tpersonService\n\t\t\t.getAll()\n\t\t\t.then(initialPersons => {\n\t\t\t\tsetPersons(initialPersons)\n\t\t\t})\n\t}, []) // empty array is dependency array make it run only once\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Phonebook</h1>\n\t\t\t<Notification message={message} error={errorState} />\n\t\t\t<FilterBar value={searchQuery} changeHandler={handleSearchInput}/>\n\t\t\t<NumberForm submitHandler={addPerson} nameChangeHandler={handleNameInput}\n\t\t\tnumberChangeHandler={handleNumberInput} nameValue={newNamed} numberValue={newNumber} />\n\t\t\t<NumberList persons={personsToShow} handleDelete={handleDelete} />\n\t\t</div>\n\t)\n}\n\nReactDOM.render( <App />, document.getElementById('root'));\n"],"sourceRoot":""}